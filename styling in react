1))))/////// index.js file  ////////////////////

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App darkMode = {false}/>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


////////////// Apps.js ///////////////////

import React from 'react'
import Header from './Components/Header.js';
import Body from './Components/Body.js';
import Boxes from './Components/Boxes.js';


export default function Apps(props){
  const styling = {
    backgroundColor: props.darkMode ? '#22222222' : '#ccccccccc',
    color:"white"
  }
  const [Boxed ,setBoxed] = React.useState(Boxes)
  const boxesItems = Boxed.map(items => <p className = "box" style={styling} key={Boxed.id}>{items.id}</p>)



return <div>
<Body darkMode={true}/>
<div>this are the data inside the box   <br/>{boxesItems}</div>
</div>

}




2)))) // changeing the color according to its condition 

file box.js////

import React from "react";

export default function Box(props){
const styled = {
    backgroundColor : props.on ? '#22222222' : 'none'
}
    return <div>
        <p className = "box" style= {styled}></p>
    </div>
}

Apps.js//////

import React from 'react'
import Header from './Components/Header.js';
import Body from './Components/Body.js';
import Boxes from './Components/Boxes.js';
import Box from './Components/box.js';


export default function Apps(props){
  const styling = {
    backgroundColor: props.darkMode ? '#2222' : '#ccccccccc',
    color:"white"
  }
  const [Boxed ,setBoxed] = React.useState(Boxes)
  const boxesItems = Boxed.map(items => (<Box key={items.id} on={items.on}  />))



return <div>
<Body darkMode={true}/>
<div>this are the data inside the box   <br/>{boxesItems}</div>
</div>

}


3))) changing the color of the shape on onclick at once 

////Apps.js

import React from 'react'
import Header from './Components/Header.js';
import Body from './Components/Body.js';
import Boxes from './Components/Boxes.js';
import Box from './Components/box.js';


export default function Apps(props){
  const styling = {
    backgroundColor: props.darkMode ? '#2222' : '#ccccccccc',
    color:"white"
  }
  const [Boxed ,setBoxed] = React.useState(Boxes)
  const boxesItems = Boxed.map(items => (<Box key={items.id} on={items.on}  />))



return <div>
<Body darkMode={true}/>
<div>this are the data inside the box   <br/>{boxesItems}</div>
</div>

}

///box.js

import React from "react";

export default function Box(props){
//making state 
    const [ControlOn,setControlOn] = React.useState(props.on)
function changedCondition(){
    setControlOn(condition => !condition)
}

const styled = {
    backgroundColor : ControlOn ? '#22222222' : 'transparent'
}
    return <div>
        <p className = "box" style= {styled} onClick={changedCondition}></p>
    </div>
}







/////more advanced way of changing color after  on click in box 

//apps.js

import React from 'react'
import Boxes from './Components/Boxes.js';
import Box from './Components/box.js';


export default function Apps(){
  const [Boxed ,setBoxed] = React.useState(Boxes)

  const styled = {
    backgroundColor : ""
  }
  function toggles(id){
    // console.log(id)

    setBoxed(preContent => (preContent.map((square) => 
    { return square.id == id ? {...square ,on : !square.on } : square})))
  }

  const boxesItems = Boxed.map(items => (<Box 
    key={items.id}
    selectId = {items.id}
     on={items.on} 
     handleClick = {toggles} />))



return <div>

<div>this are the data inside the box   <br/>{boxesItems}</div>
</div>

}


///boxes.js


import React from "react";

export default function Box(props){
// console.log(props.id)
const styled = {
    backgroundColor :props.on ? '#22222222' : 'transparent'
}
    return (
    <div 
    
    className = "box" 
    style= {styled} 
    onClick={() => props.handleClick(props.selectId)}
    >
    </div>
    )
}

